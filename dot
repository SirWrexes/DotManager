#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
# MIT License

# Copyright (c) 2020 Ludovic Fernandez

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# TODO: Implement verbosity
# -v --verbose  Show what's being done.
"""
DotManager: A flexible dotfile manager

Usage:
  dot show [supported | installed | saved]
  dot save [all | <app>] [<name>] [<user>] [--force] [--nolink]
  dot load [all | <app>] [<name>] [<user>] [--force] [--nolink]
  dot rm   [all | <app>] [<name>] [<user>] [--force]

Options:
  -h --help     Show this message and exit.
  -V --version  Show version.
  -f --force    Overwrite existing configurations.
  --nolink      Prefer copying files instead of using symlinks.
                Enabled by default for now... Because links are
                not yet implemented LUL.

Commands:
  show:
    supported  Apps that DotManager has a dotinfo for.
    installed  Supported apps that is intalled on your machine.
    saved      Configurations that you have saved.

  save, load & rm:
    [all | <app>]  Choose which app to save the configuration of.
                   - If `all`, save every installed apps' configurations.
                   - If the name of a supported app, save its configurations.
                   - If left empty, go through the list interactively.

    [<name>]       Name of the configuration.
                   Default: "default"

    [<user>]       "Owner" of the configuration.
                   Default: Your username
"""

import docopt

from DotManager.dotinfo import DotInfo
from DotManager.commands.save import save
from DotManager.commands.show import show
from DotManager.defaults import version
import DotManager.dotinfo as dotinfo
import DotManager.tools as tools

argv: dict = docopt.docopt(__doc__, version=version)


def main(argv):
    if argv["show"]:
        if argv["supported"]:
            show.supported()
            return
        if argv["installed"]:
            show.installed()
            return
        if argv["saved"]:
            show.saved()
            return

    # This influences any other command so it's set now
    params = {"force": argv["--force"]}

    if argv["save"]:
        dots: dict[str, DotInfo] = dotinfo.installed()
        if argv["<user>"]:
            params["userName"] = argv["<user>"]
        if argv["<name>"]:
            params["confName"] = argv["<name>"]

        # Single app
        if argv["<app>"]:
            if argv["<app>"] not in dots:
                tools.eprint("App not found: " + argv["<app>"])
                tools.eprint(
                    "Please use the `list` command to make sure it is supported and installed.")
                exit(1)
            params["dot"] = dots[argv["<app>"]]
            save(**params)
            return

        # All apps
        # TODO: Make menus (something like `yay`'s)
        elif argv["all"]:
            for item in dots.values():
                print("Found supported app: " + item.name)
                params["dot"] = item
                save(**params)
            return

        # Interactive
        # TODO: Make menus (something like `yay`'s)
        for item in dots.values():
            print("Found supported app: " + item.name)
            while answer := 'x' + str(input("Would you like to save it ? (Y/n): ")).lower():
                if answer == 'xn':
                    break
                elif answer in ['xy', 'x']:
                    params["dot"] = item
                    save(**params)
                    break
                else:
                    continue
        return

    if argv["load"]:
        print("I'm sorry, this feature is not yet available.")
        return

    if argv["rm"]:
        print("I'm sorry, this feature is not yet available.")
        return


if __name__ == "__main__":
    main(argv)
